{"ast":null,"code":"//importing firebase utility\nimport firebase from \"firebase/app\"; //for database, will automatically be attacjed to the firebase keyword imported before\n\nimport \"firebase/firestore\"; //for authentication, will automatically be attacjed to the firebase keyword imported before\n\nimport \"firebase/auth\";\nconst config = {\n  apiKey: \"AIzaSyBoO9rZT45-asu-aF5rP8gXpkg_bH5IMZ0\",\n  authDomain: \"crown-db-169a7.firebaseapp.com\",\n  databaseURL: \"https://crown-db-169a7.firebaseio.com\",\n  projectId: \"crown-db-169a7\",\n  storageBucket: \"crown-db-169a7.appspot.com\",\n  messagingSenderId: \"973403265926\",\n  appId: \"1:973403265926:web:d0fc4c38d99cb5625baa07\",\n  measurementId: \"G-T0TBZ7833X\"\n};\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  //save in db only when we are signing in and not when we are signing out!\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get(); // console.log(snapShot);\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log(\"error creating the user \", error.message);\n    }\n  }\n\n  return userRef;\n};\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore(); //for google authetication utility\n\nconst provider = new firebase.auth.GoogleAuthProvider(); //we always wan't to trigger a Google popup whenever we use this googleAuth provider for signing in or up\n\nprovider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["/home/amrik/Major Project/tiffinwala-master/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","initializeApp","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"AAAA;AACA,OAAOA,QAAP,MAAqB,cAArB,C,CACA;;AACA,OAAO,oBAAP,C,CACA;;AACA,OAAO,eAAP;AAEA,MAAMC,MAAM,GAAG;AACbC,EAAAA,MAAM,EAAE,yCADK;AAEbC,EAAAA,UAAU,EAAE,gCAFC;AAGbC,EAAAA,WAAW,EAAE,uCAHA;AAIbC,EAAAA,SAAS,EAAE,gBAJE;AAKbC,EAAAA,aAAa,EAAE,4BALF;AAMbC,EAAAA,iBAAiB,EAAE,cANN;AAObC,EAAAA,KAAK,EAAE,2CAPM;AAQbC,EAAAA,aAAa,EAAE;AARF,CAAf;AAWA,OAAO,MAAMC,yBAAyB,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,KAAoC;AAC3E;AACA,MAAI,CAACD,QAAL,EAAe;AAEf,QAAME,OAAO,GAAGC,SAAS,CAACC,GAAV,CAAe,SAAQJ,QAAQ,CAACK,GAAI,EAApC,CAAhB;AAEA,QAAMC,QAAQ,GAAG,MAAMJ,OAAO,CAACK,GAAR,EAAvB,CAN2E,CAQ3E;;AAEA,MAAI,CAACD,QAAQ,CAACE,MAAd,EAAsB;AACpB,UAAM;AAAEC,MAAAA,WAAF;AAAeC,MAAAA;AAAf,QAAyBV,QAA/B;AACA,UAAMW,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AACA,QAAI;AACF,YAAMV,OAAO,CAACW,GAAR,CAAY;AAChBJ,QAAAA,WADgB;AAEhBC,QAAAA,KAFgB;AAGhBC,QAAAA,SAHgB;AAIhB,WAAGV;AAJa,OAAZ,CAAN;AAMD,KAPD,CAOE,OAAOa,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAwCF,KAAK,CAACG,OAA9C;AACD;AACF;;AAED,SAAOf,OAAP;AACD,CA1BM;AA4BPb,QAAQ,CAAC6B,aAAT,CAAuB5B,MAAvB;AAEA,OAAO,MAAM6B,IAAI,GAAG9B,QAAQ,CAAC8B,IAAT,EAAb;AACP,OAAO,MAAMhB,SAAS,GAAGd,QAAQ,CAACc,SAAT,EAAlB,C,CAEP;;AACA,MAAMiB,QAAQ,GAAG,IAAI/B,QAAQ,CAAC8B,IAAT,CAAcE,kBAAlB,EAAjB,C,CACA;;AACAD,QAAQ,CAACE,mBAAT,CAA6B;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAA7B;AAEA,OAAO,MAAMC,gBAAgB,GAAG,MAAML,IAAI,CAACM,eAAL,CAAqBL,QAArB,CAA/B;AAEP,eAAe/B,QAAf","sourcesContent":["//importing firebase utility\nimport firebase from \"firebase/app\";\n//for database, will automatically be attacjed to the firebase keyword imported before\nimport \"firebase/firestore\";\n//for authentication, will automatically be attacjed to the firebase keyword imported before\nimport \"firebase/auth\";\n\nconst config = {\n  apiKey: \"AIzaSyBoO9rZT45-asu-aF5rP8gXpkg_bH5IMZ0\",\n  authDomain: \"crown-db-169a7.firebaseapp.com\",\n  databaseURL: \"https://crown-db-169a7.firebaseio.com\",\n  projectId: \"crown-db-169a7\",\n  storageBucket: \"crown-db-169a7.appspot.com\",\n  messagingSenderId: \"973403265926\",\n  appId: \"1:973403265926:web:d0fc4c38d99cb5625baa07\",\n  measurementId: \"G-T0TBZ7833X\",\n};\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  //save in db only when we are signing in and not when we are signing out!\n  if (!userAuth) return;\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n\n  const snapShot = await userRef.get();\n\n  // console.log(snapShot);\n\n  if (!snapShot.exists) {\n    const { displayName, email } = userAuth;\n    const createdAt = new Date();\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData,\n      });\n    } catch (error) {\n      console.log(\"error creating the user \", error.message);\n    }\n  }\n\n  return userRef;\n};\n\nfirebase.initializeApp(config);\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\n//for google authetication utility\nconst provider = new firebase.auth.GoogleAuthProvider();\n//we always wan't to trigger a Google popup whenever we use this googleAuth provider for signing in or up\nprovider.setCustomParameters({ prompt: \"select_account\" });\n\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\n\nexport default firebase;\n"]},"metadata":{},"sourceType":"module"}